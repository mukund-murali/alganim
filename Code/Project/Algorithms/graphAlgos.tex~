\input ../API/graphAPI

\startluacode
inf=99
n=7
gr={{}}
function dijsktra(cost, source, target)
	startAnimation("yes","no")
	gr=cost
	createGraphFromMatrix(cost)
	context("\\frame{")
	context.startMPcode()
	Graph.printEdges()
	Graph.printNodes()
	Graph.drawStartNode(source)
	Graph.drawStopNode(target)
	Graph.printNodeLabels()
	Graph.printEdgeLabels()
	context.stopMPcode()
	context("}")
	for i=1,#cost do
		for j=1,#cost[i] do
			if cost[i][j]==0 then
				cost[i][j]=inf
			end
		end
	end
	path={}
	path1={}
	selected={0,0,0,0,0,0,0}
	dist={}
	prev={}
	for i=1,#cost do
		dist[i]=inf
		prev[i]=-1
	end
	start = source
        selected[start]=1
	dist[start] = 0
	while(selected[target] ==0) do
		min = inf
		m = 0
		for i=1,n do
		    d = dist[start] +cost[start][i];
		    if d< dist[i] then
			if selected[i]==0 then
				dist[i] = d
				prev[i] = start
				context("\\frame{")
				context.startMPcode()
				Graph.printEdges()
				Graph.printNodes()
				Graph.drawColouredEdge2(i,start)
				Graph.drawStartNode(source)
				Graph.drawStopNode(target)
				Graph.drawColouredNode(start)
				Graph.drawColouredNode(i)
				for z=1,#selected do
					if selected[z]==1 then
						Graph.drawColouredNode(i)
					end
				end
				Graph.printNodeLabels()
				Graph.printEdgeLabels()
				context.stopMPcode()
				context("Minimum cost = "..dist[start]..";")
				context("}")
			end
		    end
		    if min>dist[i] and selected[i]==0 then
			min = dist[i]
			print("---"..min)
			m = i
		    end
		end
		start = m;
		selected[start] = 1;
	end
	start = target;
	print(min)
	j = 1
	while(start ~= -1) do
		path[j] = start
		j=j+1
		start= prev[start];
	end
	j=#path
	for i=1,#path do
		path1[#path+1-i]=path[i]
	end
	print("size of path1 -------"..#path1.."  "..#path)
	for i=2,#path1 do
			print("path[i] ---"..path[i])
			context("\\frame{")
			context.startMPcode()
			Graph.printEdges()
			Graph.drawColouredEdge(path1[i],path1[i-1])
			for j=2,i do
				Graph.drawColouredEdge(path1[j],path1[j-1])
			end
			Graph.printNodes()
			Graph.drawStartNode(source)
			Graph.drawStopNode(target)
			Graph.printNodeLabels()
			Graph.printEdgeLabels()
			context.stopMPcode()
			context("\\crlf")
			context("Minimum cost = "..dist[target]..";")
			context("}")
	end
	stopAnimation()
	return dist[target];
end

\stopluacode

